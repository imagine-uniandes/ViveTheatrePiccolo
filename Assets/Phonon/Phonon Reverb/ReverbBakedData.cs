/************************************************************************/
/* Copyright (C) 2011-2015 Impulsonic Inc. All Rights Reserved.         */
/*                                                                      */
/* The source code, information  and  material ("Material") contained   */
/* herein is owned  by Impulsonic Inc. or its suppliers or licensors,   */
/* and title to such  Material remains  with Impulsonic  Inc.  or its   */
/* suppliers or licensors. The Material contains proprietary informa-   */
/* tion  of  Impulsonic or  its  suppliers and licensors. No  part of   */
/* the Material may be used, copied, reproduced, modified, published,   */
/* uploaded, posted, transmitted, distributed or disclosed in any way   */
/* without Impulsonic's prior express written permission. No  license   */
/* under  any patent, copyright or other intellectual property rights   */
/* in the Material is  granted  to  or  conferred  upon  you,  either   */
/* expressly, by implication, inducement, estoppel or otherwise.  Any   */
/* license  under  such intellectual property rights must  be express   */
/* and approved by Impulsonic in writing.                               */
/*                                                                      */
/* Third Party trademarks are the property of their respective owners.  */
/*                                                                      */
/* Unless otherwise  agreed upon by Impulsonic  in  writing, you  may   */
/* not remove or  alter this  notice or any other  notice embedded in   */
/* Materials by Impulsonic or Impulsonic's  suppliers or licensors in   */
/* any way.                                                             */
/************************************************************************/

using System;
using System.IO;

using UnityEngine;


//
// ReverbBakedData
// Stores the data generated by a bake operation.
//
[AddComponentMenu("Phonon/Phonon Reverb Baked Data")]
public class ReverbBakedData : MonoBehaviour
{
	public void SaveBakedReverb(IntPtr bakerObject)
	{
		int dataSize = Phonon.Reverb.iplSaveBakedReverb(bakerObject, null);
		Data = new byte[dataSize];
		Phonon.Reverb.iplSaveBakedReverb(bakerObject, Data);
	}

	public void LoadBakedReverb(IntPtr grid)
	{
		Phonon.Reverb.iplLoadBakedReverb(Phonon.Grid.iplGetGridPoints(grid, null), Data.Length, Data, ref baker);
	}

    public void UnloadBakedReverb()
    {
        Phonon.Reverb.iplDestroyReverbBaker(baker);
    }

    public IntPtr GetBaker()
    {
        return baker;
    }

	public void ExportDataForWwise(string fileName)
	{
		// TODO: The duration should ideally be stored *with* the data, so that
		// if the user changes the duration after a bake, the exported file
		// isn't wrong.
		using (BinaryWriter binaryWriter = new BinaryWriter(File.Open(fileName, FileMode.Create)))
		{
			binaryWriter.Write(GetComponent<AcousticGrid>().GridPoints.Length / 3);
			binaryWriter.Write((int)44100);
			binaryWriter.Write(ReverbGlobalSettings.GetBakeSettings().Value.Duration);
			binaryWriter.Write(Data);
		}
	}

    IntPtr baker = IntPtr.Zero;
	public byte[] Data = null;
}